#include "registers.npl"

/*
 * Populate fields in "packet_field_bus"
 */


#define DROP_REASON__ZERO_DA 0x00000002
#define DROP_REASON__ZERO_SA 0x00000001

#define MOVE_BITS(values, bit_num)              \
	values = (values << bit_num) | values;      \

#define MINUS_SHIFT(shift, masks)               \
	if(shift != 0){							    \
		shift = shift - 1;					    \
	}										    \
	if(shift != 0){							    \
		masks = (masks >> 1) & masks;		    \
	}										    \

#define CALC_MASKS(shift)				        \
	packet_info.masks.my_value = 0x7fff;	        \
	MOVE_BITS(packet_info.masks.my_value, 16)      \
	MOVE_BITS(packet_info.masks.my_value, 32)      \
	MOVE_BITS(packet_info.masks.my_value, 64)      \
	MOVE_BITS(packet_info.masks.my_value, 128)     \
	MOVE_BITS(packet_info.masks.my_value, 256)     \
	MOVE_BITS(packet_info.masks.my_value, 512)     \
	MOVE_BITS(packet_info.masks.my_value, 1024)    \
	MOVE_BITS(packet_info.masks.my_value, 2048)    \
	MOVE_BITS(packet_info.masks.my_value, 4096)    \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \
	MINUS_SHIFT(shift, packet_info.masks.my_value) \

#define ADD_SUFFIX(name, num) name##num

#define DATA_READ(var_index, var_1, var_2)	    \
	if(0x00 == var_index){					    \
		var_2 = ADD_SUFFIX(var_1, 0);		    \
	}else if(0x01 == var_index){			    \
		var_2 = ADD_SUFFIX(var_1, 1);		    \
	}else if(0x02 == var_index){			    \
		var_2 = ADD_SUFFIX(var_1, 2);		    \
	}else if(0x03 == var_index){			    \
		var_2 = ADD_SUFFIX(var_1, 3);		    \
	}else{									    \
		set_drop_action();					    \
	}										    \


#define DATA_WRITE(var_index, var_1, var_2)	    \
	if(0x00 == var_index){						\
		ADD_SUFFIX(var_2, 0) = var_1;			\
	}else if(0x01 == var_index){				\
		ADD_SUFFIX(var_2, 1) = var_1;			\
	}else if(0x02 == var_index){				\
		ADD_SUFFIX(var_2, 2) = var_1;			\
	}else if(0x03 == var_index){				\
		ADD_SUFFIX(var_2, 3) = var_1;			\
	}else{										\
		set_drop_action();						\
	}											\



function set_drop_action(){
	tmp.set_drop = 1;
}

function do_drop_action() {
	print("do drop action\n");
	tmp.value_1 = 1;
	packet_drop(tmp.value_1, DROP_REASON__ZERO_SA, 0);
	egr_aux_bus.drop_vector = 1;
}

function set_bcast() {
	/* set egress dmac[40:40] = 1 */
	print("set broadcast\n");
	tmp.set_cast = 1;
}

function reset_all() {
	print("reset all\n");
	ps_worker_bits.value0 = 0;
	ps_worker_bits.value1 = 0;
	ps_worker_bits.value2 = 0;
	ps_worker_bits.value3 = 0;
}

function set_update_header() {
	tmp.set_upda = 1;
}

function update_all_header() {
	print("update all header\n");
	replace_header_field(egress_pkt.l2_hdr.l2.macsa, ingress_pkt.l2_hdr.l2.macda);
	replace_header_field(egress_pkt.l2_hdr.l2.macda, ingress_pkt.l2_hdr.l2.macsa);

	replace_header_field(egress_pkt.l3_hdr.ipv4.sip, ingress_pkt.l3_hdr.ipv4.dip);
	replace_header_field(egress_pkt.l3_hdr.ipv4.dip, ingress_pkt.l3_hdr.ipv4.sip);
	egress_pkt.l3_hdr.ipv4.ttl = ingress_pkt.l3_hdr.ipv4.ttl + 255;

	replace_header_field(egress_pkt.l4_hdr.udp.sport, ingress_pkt.l4_hdr.udp.dport);
	replace_header_field(egress_pkt.l4_hdr.udp.dport, ingress_pkt.l4_hdr.udp.sport);
}

function save_worker() {
	print("save worker\n");
	index.value_32 = WORKER_INFO_SAVE_ADDR;
	DATA_WRITE(index.value_32, ingress_pkt.l2_hdr.l2.macsa, ps_worker_smac.value)
	DATA_WRITE(index.value_32, ingress_pkt.l3_hdr.ipv4.sip, ps_worker_sip.value)
	DATA_WRITE(index.value_32, ingress_pkt.l4_hdr.udp.sport, ps_worker_sport.value)
}

function worker_count_reset() {
	index.value_32 = WORKER_COUNT_ADDR;
	DATA_WRITE(index.value_32, 0, ps_worker_count.value)
	print("worker count reset index :%d\n", index.value_32);
}

function load_worker() {
	print("load worker\n");
	index.value_32 = WORKER_INFO_LOAD_ADDR;
	DATA_READ(index.value_32, ps_worker_smac.value, tmp.value_48)
	replace_header_field(egress_pkt.l2_hdr.l2.macda, tmp.value_48);
	DATA_READ(index.value_32, ps_worker_sip.value, tmp.value_32)
	replace_header_field(egress_pkt.l3_hdr.ipv4.dip, tmp.value_32);
	DATA_READ(index.value_32, ps_worker_sport.value, tmp.value_16)
	replace_header_field(egress_pkt.l4_hdr.udp.dport, tmp.value_16);
}

function worker_count_sub() {
	print("worker count sub\n");
	index.value_32 = WORKER_COUNT_ADDR;
	DATA_READ(index.value_32, ps_worker_count.value, tmp.value_16)
	tmp.value_16 = tmp.value_16 - 1;
	packet_info.worker_count = tmp.value_16;
	DATA_WRITE(index.value_32, tmp.value_16, ps_worker_count.value)
}

function worker_count_add() {
	index.value_32 = WORKER_COUNT_ADDR;
	DATA_READ(index.value_32, ps_worker_count.value, tmp.value_16)
	tmp.value_16 = tmp.value_16 + 1;
	DATA_WRITE(index.value_32, tmp.value_16, ps_worker_count.value)
	packet_info.worker_count = tmp.value_16;
	print("worker count add worker count :%d\n", packet_info.worker_count);
}

function worker_count_set() {
	index.value_32 = WORKER_COUNT_ADDR;
	DATA_WRITE(index.value_32, packet_info.max_worker, ps_worker_count.value)
	packet_info.worker_count = packet_info.max_worker;
	print("worker count set worker count:%d\n", packet_info.worker_count);
}

function load_init_bits() {
	print("load init bits\t");
	index.value_32 = WORKER_BITS_ADDR;
	DATA_READ(index.value_32, ps_worker_init_bits.value, \
			packet_info.worker_init_bits)
	print("index:%d, worker init bits:%d\n", index.value_32, \
			packet_info.worker_init_bits);
}

function reset_init_bits() {
	print("reset init bits\n");
	index.value_32 = WORKER_BITS_ADDR;
	DATA_WRITE(index.value_32, 0, ps_worker_init_bits.value)
}

function set_init_bits() {
	print("set init bits\n");
	index.value_32 = WORKER_BITS_ADDR;
	DATA_READ(index.value_32, ps_worker_init_bits.value, tmp.value_16)
    tmp.value_16 = tmp.value_16 | (1 << packet_info.worker_id);
	DATA_WRITE(index.value_32, tmp.value_16, ps_worker_init_bits.value)
	packet_info.worker_init_bits = tmp.value_16;
	print("worker init bits value0:%d\n",ps_worker_init_bits.value0);
	print("worker init bits value1:%d\n",ps_worker_init_bits.value1);
	print("worker init bits value2:%d\n",ps_worker_init_bits.value2);
	print("worker init bits value3:%d\n",ps_worker_init_bits.value3);
}

function set_bits() {
	index.value_32 = WORKER_BITS_ADDR;
	DATA_READ(index.value_32, ps_worker_bits.value, tmp.value_16)
	tmp.value_16 = tmp.value_16 | (1 << packet_info.worker_id);
	DATA_WRITE(index.value_32, tmp.value_16, ps_worker_bits.value)
	packet_info.worker_bits = tmp.value_16;
	print("set bits worker bits:%d\n", packet_info.worker_bits);
}

function reset_bits() {
	print("reset bits\n");
	index.value_32 = WORKER_BITS_RESET_ADDR;
	DATA_WRITE(index.value_32, 0, ps_worker_bits.value)
}

function load_bits() {
	index.value_32 = WORKER_BITS_ADDR;
	DATA_READ(index.value_32, ps_worker_bits.value, packet_info.worker_bits)
	print("load bits:%d\n", packet_info.worker_bits);
}

function load_reset_bits() {
	index.value_32 = WORKER_BITS_ADDR;
	DATA_READ(index.value_32, ps_worker_bits.value, packet_info.reset_worker_bits)
	print("load reset bits:%d\n", packet_info.reset_worker_bits);
}

function set_load_exp() {
	tmp.set_load_exp = 1;
}

function load_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_exp.value, tmp.value_16)
	replace_header_field(egress_pkt.l4_hdr.udp.exp, tmp.value_16);
	print("load exponent:%d\n", egress_pkt.l4_hdr.udp.exp);
}

function read_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_exp.value, packet_info.exp)
	print("read exponent :%d\n", packet_info.exp);
}

function save_first_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, ingress_pkt.l4_hdr.udp.exp, ps_exp.value)
	print("save first exponent:%d\n", ingress_pkt.l4_hdr.udp.exp);
}

function save_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_exp.value, tmp.value_16)
    if(tmp.value_16 >= ingress_pkt.l4_hdr.udp.exp){
		tmp.value_16 = ingress_pkt.l4_hdr.udp.exp;
	}
	DATA_WRITE(index.value_32, tmp.value_16, ps_exp.value)
	print("save exponent:%d\n", tmp.value_16);
}

function reset_exp() {
	print("reset exponent\n");
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, 0x7fff, ps_exp.value)
}

function set_load_bias_exp() {
	tmp.set_load_bias_exp = 1;
}

function load_bias_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_bias_exp.value, tmp.value_16)
	replace_header_field(egress_pkt.l4_hdr.udp.bias_exp, tmp.value_16);
	print("load bias exponent:%d\n", egress_pkt.l4_hdr.udp.bias_exp);
}

function read_bias_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_bias_exp.value, packet_info.bias_exp)
	print("read bias exponent:%d\n", packet_info.bias_exp);
}

function save_first_bias_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, ingress_pkt.l4_hdr.udp.bias_exp, ps_bias_exp.value)
	print("save first bias exponent:%d\n", ingress_pkt.l4_hdr.udp.bias_exp);
}

function save_bias_exp() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_bias_exp.value, tmp.value_16)
	if(tmp.value_16 > ingress_pkt.l4_hdr.udp.bias_exp){
		tmp.value_16 = ingress_pkt.l4_hdr.udp.bias_exp;
	}
	DATA_WRITE(index.value_32, tmp.value_16, ps_bias_exp.value)
	print("save bias exponent:%d\n", tmp.value_16);
}

function reset_bias_exp() {
	print("reset bias exponent\n");
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, 0x7fff, ps_bias_exp.value)
}

function set_load_bias() {
	tmp.set_load_bias = 1;
}

function load_bias() {
	index.value_32 = BLOCK_ADDR;
	DATA_READ(index.value_32, ps_bias.value, tmp.value_16)
	replace_header_field(egress_pkt.l4_hdr.udp.bias, tmp.value_16);
	print("load bias:%d\n", egress_pkt.l4_hdr.udp.bias);
}

function save_first_bias() {
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, ingress_pkt.l4_hdr.udp.bias, ps_bias.value)
	print("save first bias:%d\n", ingress_pkt.l4_hdr.udp.bias);
}

function save_bias() {
	index.value_32 = BLOCK_ADDR;
	read_bias_exp();
	DATA_READ(index.value_32, ps_bias.value, tmp.value_16)
	print("tmp value:%d\t", tmp.value_16);
	if(packet_info.bias_exp >= ingress_pkt.l4_hdr.udp.bias_exp){
		tmp.shift = packet_info.bias_exp - ingress_pkt.l4_hdr.udp.bias_exp;
	}else{
		tmp.shift = ingress_pkt.l4_hdr.udp.bias_exp - packet_info.bias_exp;
	}

	if(0 == tmp.shift){
		tmp.value_16 = tmp.value_16 + ingress_pkt.l4_hdr.udp.bias;
	}else{
		if(packet_info.bias_exp >= ingress_pkt.l4_hdr.udp.bias_exp){
			tmp.value_16 = tmp.value_16 >> tmp.shift + ingress_pkt.l4_hdr.udp.bias;
		}else{
			tmp.value_16 = tmp.value_16 + ingress_pkt.l4_hdr.udp.bias >> tmp.shift;
		}
	}

	DATA_WRITE(index.value_32, tmp.value_16, ps_bias.value)
	print("tm shift:%d\t", tmp.shift);
	print("save bias:%d\n", tmp.value_16);
}

function reset_bias() {
	print("reset bias\n");
	index.value_32 = BLOCK_ADDR;
	DATA_WRITE(index.value_32, 0, ps_bias.value)
}

function set_load_value() {
	tmp.set_load_value = 1;
}

function load_value() {
	print("load value\t");
	index.value_32 = BLOCK_ADDR;
	print("index:%d\n", index.value_32);
	if(0x00 == index.value_32){
		tmp.values[0].my_value = ps_value.value00;
		tmp.values[1].my_value = ps_value.value01;
		tmp.value_32 = tmp.values[0].my_value[47:40];
		print("value:%d\n", tmp.value_32);
		tmp.value_32 = ps_value.value00[8151:8144];
		print("value:%d\n", tmp.value_32);
	}else if(0x01 == index.value_32){
		tmp.values[0].my_value = ps_value.value10;
		tmp.values[1].my_value = ps_value.value11;
	}else if(0x02 == index.value_32){
		tmp.values[0].my_value = ps_value.value20;
		tmp.values[1].my_value = ps_value.value21;
	}else if(0x03 == index.value_32){
		tmp.values[0].my_value = ps_value.value30;
		tmp.values[1].my_value = ps_value.value31;
	}else{
		set_drop_action();
	}
	replace_header_field(egress_pkt.payload.pss[0].values, tmp.values[0].my_value);
	replace_header_field(egress_pkt.payload.pss[1].values, tmp.values[1].my_value);
	tmp.value_32 = egress_pkt.payload.pss[0].values[8151:8144];
	print("value:%d\n", tmp.value_32);
}

function save_first_value() {
	index.value_32 = BLOCK_ADDR;
	print("save first value\t");
	print("index:%d\n", index.value_32);
	if(0x00 == index.value_32){
		ps_value.value00 = ps_value.value00 + ingress_pkt.payload.pss[0].values;
		ps_value.value01 = ps_value.value01 + ingress_pkt.payload.pss[1].values;
	}else if(0x01 == index.value_32){
		ps_value.value10 = ps_value.value10 + ingress_pkt.payload.pss[0].values;
		ps_value.value11 = ps_value.value11 + ingress_pkt.payload.pss[1].values;
	}else if(0x02 == index.value_32){
		ps_value.value20 = ps_value.value20 + ingress_pkt.payload.pss[0].values;
		ps_value.value21 = ps_value.value21 + ingress_pkt.payload.pss[1].values;
	}else if(0x03 == index.value_32){
		ps_value.value30 = ps_value.value30 + ingress_pkt.payload.pss[0].values;
		ps_value.value31 = ps_value.value31 + ingress_pkt.payload.pss[1].values;
	}else{
		set_drop_action();
	}
}

function reset_value() {
	print("reset value\n");
	ps_value.value00 = 0;
	ps_value.value01 = 0;
	ps_value.value10 = 0;
	ps_value.value11 = 0;
	ps_value.value20 = 0;
	ps_value.value21 = 0;
	ps_value.value30 = 0;
	ps_value.value31 = 0;
}

function save_value() {
	print("save_value\t");
	index.value_32 = BLOCK_ADDR;
	print("index:%d\t", index.value_32);
	if(packet_info.exp > ingress_pkt.l4_hdr.udp.exp){
		tmp.shift = packet_info.exp - ingress_pkt.l4_hdr.udp.exp;
	}else{
		tmp.shift = ingress_pkt.l4_hdr.udp.exp - packet_info.exp;
	}

	CALC_MASKS(tmp.shift)
	print("tmp shift:%d\n", tmp.shift);
	if(0x00 == index.value_32){
		if(0 == tmp.shift){
			ps_value.value00 = ps_value.value00 + ingress_pkt.payload.pss[0].values;
			ps_value.value01 = ps_value.value01 + ingress_pkt.payload.pss[1].values;
		}else{
			tmp.values[0].my_value = ps_value.value00;
			tmp.values[1].my_value = ps_value.value01;
			if(packet_info.exp > ingress_pkt.l4_hdr.udp.exp){
				tmp.values[0].my_value = ((tmp.values[0].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[0].values;
				tmp.values[1].my_value = ((tmp.values[1].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[1].values;
			}else{
				tmp.values[0].my_value = tmp.values[0].my_value + \
								   ((ingress_pkt.payload.pss[0].values >> tmp.shift) & \
									packet_info.masks.my_value);
				tmp.values[1].my_value = tmp.values[1].my_value + \
								   ((ingress_pkt.payload.pss[1].values >> tmp.shift) & \
									packet_info.masks.my_value);
			}
			ps_value.value00 = tmp.values[0].my_value;
			ps_value.value01 = tmp.values[1].my_value;
		}
	}else if(0x01 == index.value_32){
		if(0 == tmp.shift){
			ps_value.value10 = ps_value.value10 + ingress_pkt.payload.pss[0].values;
			ps_value.value11 = ps_value.value11 + ingress_pkt.payload.pss[1].values;
		}else{
			tmp.values[0].my_value = ps_value.value10;
			tmp.values[1].my_value = ps_value.value11;
			if(packet_info.exp > ingress_pkt.l4_hdr.udp.exp){
				tmp.values[0].my_value = ((tmp.values[0].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[0].values;
				tmp.values[1].my_value = ((tmp.values[1].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[1].values;
			}else{
				tmp.values[0].my_value = tmp.values[0].my_value + \
								   ((ingress_pkt.payload.pss[0].values >> tmp.shift) & \
									packet_info.masks.my_value);
				tmp.values[1].my_value = tmp.values[1].my_value + \
								   ((ingress_pkt.payload.pss[1].values >> tmp.shift) & \
									packet_info.masks.my_value);
			}
			ps_value.value10 = tmp.values[0].my_value;
			ps_value.value11 = tmp.values[1].my_value;
		}
	}else if(0x02 == index.value_32){
		if(0 == tmp.shift){
			ps_value.value20 = ps_value.value20 + ingress_pkt.payload.pss[0].values;
			ps_value.value21 = ps_value.value21 + ingress_pkt.payload.pss[1].values;
		}else{
			tmp.values[0].my_value = ps_value.value20;
			tmp.values[1].my_value = ps_value.value21;
			if(packet_info.exp > ingress_pkt.l4_hdr.udp.exp){
				tmp.values[0].my_value = ((tmp.values[0].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[0].values;
				tmp.values[1].my_value = ((tmp.values[1].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[1].values;
			}else{
				tmp.values[0].my_value = tmp.values[0].my_value + \
								   ((ingress_pkt.payload.pss[0].values >> tmp.shift) & \
									packet_info.masks.my_value);
				tmp.values[1].my_value = tmp.values[1].my_value + \
								   ((ingress_pkt.payload.pss[1].values >> tmp.shift) & \
									packet_info.masks.my_value);
			}
			ps_value.value20 = tmp.values[0].my_value;
			ps_value.value21 = tmp.values[1].my_value;
		}
	}else if(0x03 == index.value_32){
		if(0 == tmp.shift){
			ps_value.value30 = ps_value.value30 + ingress_pkt.payload.pss[0].values;
			ps_value.value31 = ps_value.value31 + ingress_pkt.payload.pss[1].values;
		}else{
			tmp.values[0].my_value = ps_value.value30;
			tmp.values[1].my_value = ps_value.value31;
			if(packet_info.exp > ingress_pkt.l4_hdr.udp.exp){
				tmp.values[0].my_value = ((tmp.values[0].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[0].values;
				tmp.values[1].my_value = ((tmp.values[1].my_value >> tmp.shift) & packet_info.masks.my_value) \
								   +  ingress_pkt.payload.pss[1].values;
			}else{
				tmp.values[0].my_value = tmp.values[0].my_value + \
								   ((ingress_pkt.payload.pss[0].values >> tmp.shift) & \
									packet_info.masks.my_value);
				tmp.values[1].my_value = tmp.values[1].my_value + \
								   ((ingress_pkt.payload.pss[1].values >> tmp.shift) & \
									packet_info.masks.my_value);
			}
			ps_value.value30 = tmp.values[0].my_value;
			ps_value.value31 = tmp.values[1].my_value;
		}
	}else{
		set_drop_action();
	}
}


/* 通过bit位设置worker数量，bit为1的数量即最大worker数 */
function get_max_worker_bits() {
	packet_info.max_worker_bits = (1 << packet_info.max_worker) - 1;
	print("get max worker bits:%d\n", packet_info.max_worker_bits);
}

/* reset初始化部分 */
function reset_according_sequence() {
	print("reset according sequence\n");
	load_init_bits();

	if((65530 >= packet_info.sequence) && \
			(0 == packet_info.worker_init_bits)) {
		set_update_header();
	}else if((packet_info.worker_init_bits \
			& (1 << packet_info.worker_id)) != 0) {
		print("worker init bits:%d, worker id:%d\n", 
				packet_info.worker_init_bits, packet_info.worker_id);
		set_drop_action();
	}else {

		if(0 == packet_info.worker_init_bits) {
			worker_count_reset();
		}
		set_init_bits();
		worker_count_add();
		save_worker();

		if(packet_info.worker_init_bits != packet_info.max_worker_bits) {
			set_drop_action();
		}else {
			reset_init_bits();
			reset_all();
			set_update_header();
			set_bcast();
		}
	}
}


function do_egress_pkt_modify() {
	if(1 == tmp.set_drop){
		do_drop_action();
	}else{
		egress_pkt.l2_hdr.l2 = ingress_pkt.l2_hdr.l2;
		egress_pkt.l3_hdr.ipv4 = ingress_pkt.l3_hdr.ipv4;
		egress_pkt.l4_hdr.udp = ingress_pkt.l4_hdr.udp;
		//tmp.port_num = tmp.port_num - 1;
		//obj_bus.port_num = tmp.port_num;
		egress_pkt.payload = ingress_pkt.payload;
		tmp.value_16 = ingress_pkt.l2_hdr.l2.ethertype;

		if(1 == tmp.set_upda){
			update_all_header();
		}

		if(1 == tmp.set_load_exp){
			load_exp();
		}

		if(1 == tmp.set_load_bias){
			load_bias();
		}

		if(1 == tmp.set_load_bias_exp){
			load_bias_exp();
		}

		if(1 == tmp.set_load_value){
			load_value();
		}

		if(1 == tmp.set_cast){
			tmp.value_1 = 1;
			egress_pkt.l2_hdr.l2.macsa[40:40] = tmp.value_1;
			egress_pkt.l2_hdr.l2.macda[40:40] = tmp.value_1;
			worker_count_sub();
			//load_worker();
			print("set broadcast1\n");
		}

		if(egress_pkt.l2_hdr.l2._PRESENT) {
			replace_header_field(egress_pkt.l2_hdr.l2.ethertype, tmp.value_16);
		}else{
			replace_header_field(egress_pkt.l2_hdr.l2.ethertype, tmp.value_16);
		}
	}

}

function update_package() {
	print("update package and send\n");
	set_update_header();
	set_load_exp();
	set_load_bias();
	set_load_bias_exp();
	set_load_value();
	set_bcast();
}

function reset_info() {
	reset_exp();
	reset_bias();
	reset_bias_exp();
	reset_value();
	if(packet_info.sequence > (BLOCK_SIZE / 2)){
		load_reset_bits();
		if(packet_info.reset_worker_bits == packet_info.max_worker_bits){
			reset_bits();
		}
	}
}

function do_calculation() {

	get_max_worker_bits();

	load_bits();
	if(packet_info.worker_bits == packet_info.max_worker_bits){
		update_package();
	}else if(60000 <= packet_info.sequence) {
		reset_according_sequence();
	}else{
		if(0 == packet_info.worker_bits){
			reset_info();
		}
		if((packet_info.worker_bits & (1 << packet_info.worker_id)) != 0){
			set_drop_action();
		}else{
			set_bits();
			read_exp();
			if(0x7fff == packet_info.exp){
				save_first_exp();
				save_first_bias();
				save_first_bias_exp();
				save_first_value();
			}else{
				save_bias();
				save_bias_exp();
				save_exp();
				save_value();
			}
			load_bits();
			if(packet_info.worker_bits != packet_info.max_worker_bits){
				set_drop_action();  // drop收进来的包
			}else{
				worker_count_set();
				set_update_header();
				set_load_exp();
				set_load_bias();
				set_load_bias_exp();
				set_load_value();
				set_bcast();
			}
		}
	}
	//tmp.port_num = 2;
}
