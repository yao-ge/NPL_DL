/*
 * $Copyright: (c) 2018 Broadcom Corp.
 * All Rights Reserved.$
 * File:     bmodel.cpp
 * Purpose:  NPL Behavior Modeling Source Code
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from:
 * npl/bus.npl
 * Edits to this file will be lost when it is regenerated.
 *
 */


/*
 * includes
 */

#include "bmodel.h"


/*
 * bmodel constructor
 */

_BModel::_BModel() { 


    /*
     * bus instantiations
     */

    obj_bus = new obj_bus_t;
    ccbi = new ccbi_t;
    ccbe = new ccbe_t;
    control_id = new control_id_t;
    time_bus = new time_bus_t;
    egr_obj_bus = new egr_obj_bus_t;
    egr_aux_bus = new aux_bus_t;
    packet_info = new packet_info_t;
    tmp = new tmp_t;
    index = new index_t;


    /*
     * packet instantiations
     */

    ingress_pkt = new ingress_pkt_t;
    egress_pkt = new egress_pkt_t;


    /*
     * register instantiations
     */

    register_tuple_t = new tuple_t;
    register_ps_value = new ps_value;
    register_ps_exp = new ps_exp;
    register_ps_bias = new ps_bias;
    register_ps_bias_exp = new ps_bias_exp;
    register_ps_worker_init_bits = new ps_worker_init_bits;
    register_ps_worker_bits = new ps_worker_bits;
    register_ps_worker_count = new ps_worker_count;
    register_ps_worker_smac = new ps_worker_smac;
    register_ps_worker_sip = new ps_worker_sip;
    register_ps_worker_sport = new ps_worker_sport;


    /*
     * table instantiations
     */

    /* table class instances */
    sfc_mmu_profile = new sfc_mmu_profile_tab_t;
    sfc_edb_profile = new sfc_edb_profile_tab_t;
    sfc_iarb_profile = new sfc_iarb_profile_tab_t;

    /* sfc bookkeeping table */
    sfc_mmu_profile__bk = new sfc_bk_t(2, 3);
    sfc_edb_profile__bk = new sfc_bk_t(2, 3);
    sfc_iarb_profile__bk = new sfc_bk_t(2, 5);

    /* initialize SF tables */
    _AUTO_sf_tbl_init();

}


/*
 * bmodel disstructor
 */

_BModel::~_BModel() { 
    /* buses */
    delete obj_bus;
    delete ccbi;
    delete ccbe;
    delete control_id;
    delete time_bus;
    delete egr_obj_bus;
    delete egr_aux_bus;
    delete packet_info;
    delete tmp;
    delete index;
    /* packets */
    delete ingress_pkt;
    delete egress_pkt;
    /* registers */
    delete register_tuple_t;
    delete register_ps_value;
    delete register_ps_exp;
    delete register_ps_bias;
    delete register_ps_bias_exp;
    delete register_ps_worker_init_bits;
    delete register_ps_worker_bits;
    delete register_ps_worker_count;
    delete register_ps_worker_smac;
    delete register_ps_worker_sip;
    delete register_ps_worker_sport;
    /* table classes */
    delete sfc_mmu_profile;
    delete sfc_edb_profile;
    delete sfc_iarb_profile;
    /* sfc bookkeeping tables */
    delete sfc_mmu_profile__bk;
    delete sfc_edb_profile__bk;
    delete sfc_iarb_profile__bk;

}


/*
 * ing init function
 */

void _BModel::_AUTO_ing_init(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    /* reset random generator */
    srand(time(NULL));

    /* reset hdr_ptr */
    hdr_ptr = 0;
    pn_func = 0;

    /* clear ing_pkt_drp_info */
    ing_pkt_drp_info.first_opcode = 0;
    ing_pkt_drp_info.max_opcode = 0;
    ing_pkt_drp_info.max_strn = 0;
    ing_pkt_drp_info.pp_drop = 0;
    ing_pkt_drp_info.hard_pp_drop = 0;
    /* clear ing_pkt_trc_info */
    ing_pkt_trc_info.bitmap = 0;
    /* clear ing_pkt_cnt_info */
    ing_pkt_cnt_info.bitmap = 0;
    in_ing_main = 1;

    /* initialize ing packets */
    ingress_pkt->set_resetval();
    match_id = &ingress_pkt->_match_id;
    egress_pkt->set_resetval();
    match_id = &egress_pkt->_match_id;

    /* initialize ing buses */
    if (bus_reset_0) {
        /* reset bus to 0 */
        control_id->set_resetval();
        obj_bus->set_resetval();
        time_bus->set_resetval();
        packet_info->set_resetval();
        index->set_resetval();
        egr_aux_bus->set_resetval();
        tmp->set_resetval();
        ccbe->set_resetval();
        ccbi->set_resetval();
    } else {
        /* reset bus to random values */
        control_id->set_randval();
        obj_bus->set_randval();
        time_bus->set_randval();
        packet_info->set_randval();
        index->set_randval();
        egr_aux_bus->set_randval();
        tmp->set_randval();
        ccbe->set_randval();
        ccbi->set_randval();
    }

    /* initialize ing table pointers */
    /* initialize ing strength table pointers */
    /* initialize ing special function table pointers */
    sfc_iarb_profile_entry = NULL;
    sfc_mmu_profile_entry = NULL;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}



/*
 * egr init function
 */

void _BModel::_AUTO_egr_init(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    /* clear egr_pkt_drp_info */
    egr_pkt_drp_info.first_opcode = 0;
    egr_pkt_drp_info.max_opcode = 0;
    egr_pkt_drp_info.max_strn = 0;
    egr_pkt_drp_info.pp_drop = 0;
    egr_pkt_drp_info.hard_pp_drop = 0;
    /* clear egr_pkt_trc_info */
    egr_pkt_trc_info.bitmap = 0;
    /* clear egr_pkt_cnt_info */
    egr_pkt_cnt_info.bitmap = 0;
    in_ing_main = 0;

    /* initialize egr packets */

    /* initialize egr only buses */
    if (bus_reset_0) {
        /* reset bus to 0 */
        egr_obj_bus->set_resetval();
    } else {
        /* reset bus to random values */
        egr_obj_bus->set_randval();
    }

    /* initialize egr table pointers */
    /* initialize egr strength table pointers */
    /* initialize egr special function table pointers */
    sfc_mmu_profile_entry = NULL;
    sfc_edb_profile_entry = NULL;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}



/*
 * table key functions
 */


/*
 * table action functions
 */


/*
 * parse node functions
 */

void _BModel::_AUTO_PARSER_NODE_start(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    /* root_node */
    _AUTO_PARSER_NODE_ethernet();
    return;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_ethernet(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    if (ingress_pkt->l2_hdr->l2->extract_fields(ing_pkt, &hdr_ptr, &pkt_len)!=0) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s(): extract_fields() error", __FUNCTION__);
#endif
        return;
    }
    ingress_pkt->l2_hdr->l2->_PRESENT = 1;
    ingress_pkt->l2_hdr->l2->_PRESENT_CUR = 1;
    update_mid__ingress_pkt__l2_hdr__l2();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: ingress_pkt->l2_hdr->l2->ethertype: 0x%s;  line: %d", ingress_pkt->l2_hdr->l2->ethertype.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((ingress_pkt->l2_hdr->l2->ethertype == 0x0800)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        _AUTO_PARSER_NODE_ipv4();
        return;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        _AUTO_PARSER_NODE_ingress();
        return;
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_ipv4(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    if (ingress_pkt->l3_hdr->ipv4->extract_fields(ing_pkt, &hdr_ptr, &pkt_len)!=0) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s(): extract_fields() error", __FUNCTION__);
#endif
        return;
    }
    ingress_pkt->l3_hdr->ipv4->_PRESENT = 1;
    ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR = 1;
    update_mid__ingress_pkt__l3_hdr__ipv4();
    _AUTO_PARSER_NODE_udp();
    return;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_udp(void) {
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    if (ingress_pkt->l4_hdr->udp->extract_fields(ing_pkt, &hdr_ptr, &pkt_len)!=0) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s(): extract_fields() error", __FUNCTION__);
#endif
        return;
    }
    ingress_pkt->l4_hdr->udp->_PRESENT = 1;
    ingress_pkt->l4_hdr->udp->_PRESENT_CUR = 1;
    update_mid__ingress_pkt__l4_hdr__udp();
    if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
    }
    set_bits_16 = ingress_pkt->l4_hdr->udp->job_id; 
    packet_info->set_job_id(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->max_worker; 
    packet_info->set_max_worker(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->worker_id; 
    packet_info->set_worker_id(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->sequence; 
    packet_info->set_sequence(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->exp; 
    packet_info->set_exp(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->bias; 
    packet_info->set_bias(set_bits_16, 15, 0);
    set_bits_16 = ingress_pkt->l4_hdr->udp->bias_exp; 
    packet_info->set_bias_exp(set_bits_16, 15, 0);
    printf("job id:%d, max worker:%d, worker id:%d, sequence:%d, exp:%d, bias:%d, bias_exp:%d\n", (int)packet_info->job_id, (int)packet_info->max_worker, (int)packet_info->worker_id, (int)packet_info->sequence, (int)packet_info->exp, (int)packet_info->bias, (int)packet_info->bias_exp);
    _AUTO_PARSER_NODE_payload();
    return;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_payload(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    if (ingress_pkt->payload->pss[0]->extract_fields(ing_pkt, &hdr_ptr, &pkt_len)!=0) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s(): extract_fields() error", __FUNCTION__);
#endif
        return;
    }
    ingress_pkt->payload->pss[0]->_PRESENT = 1;
    ingress_pkt->payload->pss[0]->_PRESENT_CUR = 1;
    update_mid__ingress_pkt__payload__pss___0___();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: ingress_pkt->l4_hdr->udp->length: 0x%s;  line: %d", ingress_pkt->l4_hdr->udp->length.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((1024 < (ingress_pkt->l4_hdr->udp->length - 8))) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        _AUTO_PARSER_NODE_payload1();
        return;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        _AUTO_PARSER_NODE_ingress();
        return;
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_payload1(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    if (ingress_pkt->payload->pss[1]->extract_fields(ing_pkt, &hdr_ptr, &pkt_len)!=0) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s(): extract_fields() error", __FUNCTION__);
#endif
        return;
    }
    ingress_pkt->payload->pss[1]->_PRESENT = 1;
    ingress_pkt->payload->pss[1]->_PRESENT_CUR = 1;
    update_mid__ingress_pkt__payload__pss___1___();
    _AUTO_PARSER_NODE_ingress();
    return;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::_AUTO_PARSER_NODE_ingress(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    /* end_node - parsing done */
    pn_func = 0;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}



/*
 * varbit functions
 */


/*
 * functions
 */

void _BModel::base_assign_destination(void) {
    _128bits set_bits_128;
    _7bits set_bits_7;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    set_bits_128 = 0; 
    ccbi->set_l3_pbm(set_bits_128, 127, 0);
    set_bits_7 = 0; 
    ccbe->set_dst_port(set_bits_7, 6, 0);
    set_bits_128 = (1 << obj_bus->port_num); 
    ccbi->set_l2_pbm(set_bits_128, 127, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::base_egress(void) {
    _16bits set_bits_16;
    _8bits set_bits_8;
    _7bits set_bits_7;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    set_bits_16 = 0; 
    egr_aux_bus->set_drop_vector(set_bits_16, 15, 0);
    set_bits_8 = 0; 
    egr_obj_bus->set_dst_modid(set_bits_8, 7, 0);
    set_bits_7 = obj_bus->port_num; 
    egr_obj_bus->set_dst_port(set_bits_7, 6, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::do_drop_action(void) {
    _8bits pd_arg_0;
    _8bits pd_arg_1;
    _4bits pd_arg_2;
    _1bit set_bit_1;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("do drop action\n");
    set_bit_1 = 1; 
    tmp->set_value_1(set_bit_1, 0, 0);
    pd_arg_0 = tmp->value_1;
    pd_arg_1 = 0x00000001;
    pd_arg_2 = 0;
    packet_drop(&pd_arg_0, &pd_arg_1, &pd_arg_2);
    set_bits_16 = 1; 
    egr_aux_bus->set_drop_vector(set_bits_16, 15, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::set_bcast(void) {
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("set broadcast\n");
    set_bits_16 = 1; 
    tmp->set_set_cast(set_bits_16, 15, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_all(void) {
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset all\n");
    set_bits_16 = 0; 
    register_ps_worker_bits->set_value0(set_bits_16, -1, 0);
    set_bits_16 = 0; 
    register_ps_worker_bits->set_value1(set_bits_16, -1, 0);
    set_bits_16 = 0; 
    register_ps_worker_bits->set_value2(set_bits_16, -1, 0);
    set_bits_16 = 0; 
    register_ps_worker_bits->set_value3(set_bits_16, -1, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::update_all_header(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("update all header\n");
    egress_pkt->set_l2_hdr(ingress_pkt->l2_hdr);
    update_mid__egress_pkt__l2_hdr();
    egress_pkt->set_l3_hdr(ingress_pkt->l3_hdr);
    update_mid__egress_pkt__l3_hdr();
    egress_pkt->set_l4_hdr(ingress_pkt->l4_hdr);
    update_mid__egress_pkt__l4_hdr();
    if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
    }
    egress_pkt->l2_hdr->l2->macda = ingress_pkt->l2_hdr->l2->macsa;
    egress_pkt->l2_hdr->l2->macsa = ingress_pkt->l2_hdr->l2->macda;
    if (ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s() Header ingress_pkt->l3_hdr->ipv4 not present", __FUNCTION__);
#endif
    }
    egress_pkt->l3_hdr->ipv4->sip = ingress_pkt->l3_hdr->ipv4->dip;
    egress_pkt->l3_hdr->ipv4->dip = ingress_pkt->l3_hdr->ipv4->sip;
    if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
    }
    egress_pkt->l4_hdr->udp->dport = ingress_pkt->l4_hdr->udp->sport;
    egress_pkt->l4_hdr->udp->sport = ingress_pkt->l4_hdr->udp->dport;
    printf("egress_pkt.l4_hdr.udp.dport:%d, egress_pkt.l4_hdr.udp.sport:%d\n", (int)egress_pkt->l4_hdr->udp->dport, (int)egress_pkt->l4_hdr->udp->sport);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::save_worker(void) {
    _32bits set_bits_32;
    _48bits set_bits_48;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("save worker\n");
    set_bits_32 = (((packet_info->job_id * 4) + packet_info->worker_count) - 1); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
            bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
        }
        set_bits_48 = ingress_pkt->l2_hdr->l2->macsa; 
        register_ps_worker_smac->set_value0(set_bits_48, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
            }
            set_bits_48 = ingress_pkt->l2_hdr->l2->macsa; 
            register_ps_worker_smac->set_value1(set_bits_48, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                    bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
                }
                set_bits_48 = ingress_pkt->l2_hdr->l2->macsa; 
                register_ps_worker_smac->set_value2(set_bits_48, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                        bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
                    }
                    set_bits_48 = ingress_pkt->l2_hdr->l2->macsa; 
                    register_ps_worker_smac->set_value3(set_bits_48, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        if (ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
            bmi_log->error("ERROR: %s() Header ingress_pkt->l3_hdr->ipv4 not present", __FUNCTION__);
#endif
        }
        set_bits_32 = ingress_pkt->l3_hdr->ipv4->sip; 
        register_ps_worker_sip->set_value0(set_bits_32, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            if (ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                bmi_log->error("ERROR: %s() Header ingress_pkt->l3_hdr->ipv4 not present", __FUNCTION__);
#endif
            }
            set_bits_32 = ingress_pkt->l3_hdr->ipv4->sip; 
            register_ps_worker_sip->set_value1(set_bits_32, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                if (ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                    bmi_log->error("ERROR: %s() Header ingress_pkt->l3_hdr->ipv4 not present", __FUNCTION__);
#endif
                }
                set_bits_32 = ingress_pkt->l3_hdr->ipv4->sip; 
                register_ps_worker_sip->set_value2(set_bits_32, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    if (ingress_pkt->l3_hdr->ipv4->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                        bmi_log->error("ERROR: %s() Header ingress_pkt->l3_hdr->ipv4 not present", __FUNCTION__);
#endif
                    }
                    set_bits_32 = ingress_pkt->l3_hdr->ipv4->sip; 
                    register_ps_worker_sip->set_value3(set_bits_32, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
            bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
        }
        set_bits_16 = ingress_pkt->l4_hdr->udp->sport; 
        register_ps_worker_sport->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
            }
            set_bits_16 = ingress_pkt->l4_hdr->udp->sport; 
            register_ps_worker_sport->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                    bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
                }
                set_bits_16 = ingress_pkt->l4_hdr->udp->sport; 
                register_ps_worker_sport->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    if (ingress_pkt->l4_hdr->udp->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
                        bmi_log->error("ERROR: %s() Header ingress_pkt->l4_hdr->udp not present", __FUNCTION__);
#endif
                    }
                    set_bits_16 = ingress_pkt->l4_hdr->udp->sport; 
                    register_ps_worker_sport->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::worker_count_reset(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("worker count reset\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0; 
        register_ps_worker_count->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0; 
            register_ps_worker_count->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0; 
                register_ps_worker_count->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0; 
                    register_ps_worker_count->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::worker_count_add(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("worker count add\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = register_ps_worker_count->value0; 
        tmp->set_value_16(set_bits_16, 15, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = register_ps_worker_count->value1; 
            tmp->set_value_16(set_bits_16, 15, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = register_ps_worker_count->value2; 
                tmp->set_value_16(set_bits_16, 15, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = register_ps_worker_count->value3; 
                    tmp->set_value_16(set_bits_16, 15, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
    set_bits_16 = (tmp->value_16 + 1); 
    tmp->set_value_16(set_bits_16, 15, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = tmp->value_16; 
        register_ps_worker_count->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = tmp->value_16; 
            register_ps_worker_count->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = tmp->value_16; 
                register_ps_worker_count->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = tmp->value_16; 
                    register_ps_worker_count->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
    set_bits_16 = tmp->value_16; 
    packet_info->set_worker_count(set_bits_16, 15, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_init_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load init bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = register_ps_worker_init_bits->value0; 
        packet_info->set_worker_init_bits(set_bits_16, 15, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = register_ps_worker_init_bits->value1; 
            packet_info->set_worker_init_bits(set_bits_16, 15, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = register_ps_worker_init_bits->value2; 
                packet_info->set_worker_init_bits(set_bits_16, 15, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = register_ps_worker_init_bits->value3; 
                    packet_info->set_worker_init_bits(set_bits_16, 15, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_init_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset init bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0; 
        register_ps_worker_init_bits->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0; 
            register_ps_worker_init_bits->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0; 
                register_ps_worker_init_bits->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0; 
                    register_ps_worker_init_bits->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::set_init_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("set init bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = register_ps_worker_init_bits->value0; 
        tmp->set_value_16(set_bits_16, 15, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = register_ps_worker_init_bits->value1; 
            tmp->set_value_16(set_bits_16, 15, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = register_ps_worker_init_bits->value2; 
                tmp->set_value_16(set_bits_16, 15, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = register_ps_worker_init_bits->value3; 
                    tmp->set_value_16(set_bits_16, 15, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
    set_bits_16 = (tmp->value_16 | (1 << packet_info->worker_id)); 
    tmp->set_value_16(set_bits_16, 15, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = tmp->value_16; 
        register_ps_worker_init_bits->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = tmp->value_16; 
            register_ps_worker_init_bits->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = tmp->value_16; 
                register_ps_worker_init_bits->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = tmp->value_16; 
                    register_ps_worker_init_bits->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }
    set_bits_16 = tmp->value_16; 
    packet_info->set_worker_init_bits(set_bits_16, 15, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + ((packet_info->sequence - 2) % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0; 
        register_ps_worker_bits->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0; 
            register_ps_worker_bits->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0; 
                register_ps_worker_bits->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0; 
                    register_ps_worker_bits->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = register_ps_worker_bits->value0; 
        packet_info->set_worker_bits(set_bits_16, 15, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = register_ps_worker_bits->value1; 
            packet_info->set_worker_bits(set_bits_16, 15, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = register_ps_worker_bits->value2; 
                packet_info->set_worker_bits(set_bits_16, 15, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = register_ps_worker_bits->value3; 
                    packet_info->set_worker_bits(set_bits_16, 15, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_reset_bits(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load reset bits\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = register_ps_worker_bits->value0; 
        packet_info->set_reset_worker_bits(set_bits_16, 15, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = register_ps_worker_bits->value1; 
            packet_info->set_reset_worker_bits(set_bits_16, 15, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = register_ps_worker_bits->value2; 
                packet_info->set_reset_worker_bits(set_bits_16, 15, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = register_ps_worker_bits->value3; 
                    packet_info->set_reset_worker_bits(set_bits_16, 15, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_exp(void) {
    _32bits set_bits_32;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load exponent\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        egress_pkt->l4_hdr->udp->exp = register_ps_exp->value0;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            egress_pkt->l4_hdr->udp->exp = register_ps_exp->value1;
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                egress_pkt->l4_hdr->udp->exp = register_ps_exp->value2;
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    egress_pkt->l4_hdr->udp->exp = register_ps_exp->value3;
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_exp(void) {
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset exponent\n");
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0x7fff; 
        register_ps_exp->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0x7fff; 
            register_ps_exp->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0x7fff; 
                register_ps_exp->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0x7fff; 
                    register_ps_exp->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_bias_exp(void) {
    _32bits set_bits_32;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load bias exponent\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        egress_pkt->l4_hdr->udp->bias_exp = register_ps_bias_exp->value0;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            egress_pkt->l4_hdr->udp->bias_exp = register_ps_bias_exp->value1;
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                egress_pkt->l4_hdr->udp->bias_exp = register_ps_bias_exp->value2;
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    egress_pkt->l4_hdr->udp->bias_exp = register_ps_bias_exp->value3;
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_bias_exp(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset bias exponent\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0x7fff; 
        register_ps_bias_exp->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0x7fff; 
            register_ps_bias_exp->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0x7fff; 
                register_ps_bias_exp->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0x7fff; 
                    register_ps_bias_exp->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_bias(void) {
    _32bits set_bits_32;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load bias\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        egress_pkt->l4_hdr->udp->bias = register_ps_bias->value0;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            egress_pkt->l4_hdr->udp->bias = register_ps_bias->value1;
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                egress_pkt->l4_hdr->udp->bias = register_ps_bias->value2;
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    egress_pkt->l4_hdr->udp->bias = register_ps_bias->value3;
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_bias(void) {
    _32bits set_bits_32;
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset bias\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bits_16 = 0; 
        register_ps_bias->set_value0(set_bits_16, -1, 0);
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            set_bits_16 = 0; 
            register_ps_bias->set_value1(set_bits_16, -1, 0);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                set_bits_16 = 0; 
                register_ps_bias->set_value2(set_bits_16, -1, 0);
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    set_bits_16 = 0; 
                    register_ps_bias->set_value3(set_bits_16, -1, 0);
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::load_value(void) {
    _32bits set_bits_32;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("load value\n");
    set_bits_32 = ((packet_info->job_id * 4) + (packet_info->sequence % 4)); 
    index->set_value_32(set_bits_32, 31, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((0x00 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        egress_pkt->payload->pss[0]->values = register_ps_value->value00;
        egress_pkt->payload->pss[1]->values = register_ps_value->value01;
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((0x01 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            egress_pkt->payload->pss[0]->values = register_ps_value->value10;
            egress_pkt->payload->pss[1]->values = register_ps_value->value11;
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0x02 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                egress_pkt->payload->pss[0]->values = register_ps_value->value20;
                egress_pkt->payload->pss[1]->values = register_ps_value->value21;
            } else {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: index->value_32: 0x%s;  line: %d", index->value_32.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((0x03 == index->value_32)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    egress_pkt->payload->pss[0]->values = register_ps_value->value30;
                    egress_pkt->payload->pss[1]->values = register_ps_value->value31;
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_value(void) {
    _8192bits set_bits_8192;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset value\n");
    set_bits_8192 = 0; 
    register_ps_value->set_value00(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value01(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value10(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value11(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value20(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value21(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value30(set_bits_8192, -1, 0);
    set_bits_8192 = 0; 
    register_ps_value->set_value31(set_bits_8192, -1, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::get_max_worker_bits(void) {
    _16bits set_bits_16;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("get max worker bits\n");
    set_bits_16 = ((1 << packet_info->max_worker) - 1); 
    packet_info->set_max_worker_bits(set_bits_16, 15, 0);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_according_sequence(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    printf("reset according sequence\n");
    load_init_bits();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: packet_info->sequence: 0x%s;  line: %d", packet_info->sequence.to_string(SC_HEX_US, false).c_str(), __LINE__);
        bmi_log->normal("BM_TRACE: packet_info->worker_init_bits: 0x%s;  line: %d", packet_info->worker_init_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if (((65530 >= packet_info->sequence) && (0 == packet_info->worker_init_bits))) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        update_all_header();
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: packet_info->worker_id: 0x%s;  line: %d", packet_info->worker_id.to_string(SC_HEX_US, false).c_str(), __LINE__);
            bmi_log->normal("BM_TRACE: packet_info->worker_init_bits: 0x%s;  line: %d", packet_info->worker_init_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((packet_info->worker_init_bits & ((1 << packet_info->worker_id) != 0))) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            do_drop_action();
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: packet_info->worker_init_bits: 0x%s;  line: %d", packet_info->worker_init_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0 == packet_info->worker_init_bits)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                worker_count_reset();
                set_init_bits();
                worker_count_add();
                save_worker();
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: packet_info->max_worker_bits: 0x%s;  line: %d", packet_info->max_worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
                    bmi_log->normal("BM_TRACE: packet_info->worker_init_bits: 0x%s;  line: %d", packet_info->worker_init_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
                }
#endif
                if ((packet_info->worker_init_bits != packet_info->max_worker_bits)) {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    do_drop_action();
                } else {
#ifndef NO_CONSOLE_OUTPUT
                    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                        bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                    }
#endif
                    reset_init_bits();
                    reset_all();
                    update_all_header();
                    set_bcast();
                }
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::do_egress_pkt_modify(void) {
    _16bits set_bits_16;
    _1bit set_bit_1;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    egress_pkt->l2_hdr->set_l2(ingress_pkt->l2_hdr->l2);
    update_mid__egress_pkt__l2_hdr__l2();
    egress_pkt->l3_hdr->set_ipv4(ingress_pkt->l3_hdr->ipv4);
    update_mid__egress_pkt__l3_hdr__ipv4();
    egress_pkt->l4_hdr->set_udp(ingress_pkt->l4_hdr->udp);
    update_mid__egress_pkt__l4_hdr__udp();
    egress_pkt->set_payload(ingress_pkt->payload);
    update_mid__egress_pkt__payload();
    if (ingress_pkt->l2_hdr->l2->_PRESENT_CUR != 1) {
#ifndef NO_CONSOLE_OUTPUT
        bmi_log->error("ERROR: %s() Header ingress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
    }
    set_bits_16 = ingress_pkt->l2_hdr->l2->ethertype; 
    tmp->set_value_16(set_bits_16, 15, 0);
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: tmp->set_cast: 0x%s;  line: %d", tmp->set_cast.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((1 == tmp->set_cast)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        set_bit_1 = 1; 
        tmp->set_value_1(set_bit_1, 0, 0);
        egress_pkt->l2_hdr->l2->macsa(40,40) = tmp->value_1;
        egress_pkt->l2_hdr->l2->macda(40,40) = tmp->value_1;
        printf("set broadcast1\n");
    }
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: egress_pkt->l2_hdr->l2->_PRESENT: 0x%s;  line: %d", egress_pkt->l2_hdr->l2->_PRESENT.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((egress_pkt->l2_hdr->l2->_PRESENT != 0)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        //replace_header_field(&egress_pkt->l2_hdr->l2->ethertype, &tmp->value_16);
        if (egress_pkt->l2_hdr->l2->_PRESENT_CUR == 1) {
            egress_pkt->l2_hdr->l2->ethertype = tmp->value_16;
            egress_pkt->l2_hdr->l2->pack();
            egress_pkt->l2_hdr->l2->update_pkt(egr_pkt);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            bmi_log->error("ERROR: %s() Header egress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
        }
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        //replace_header_field(&egress_pkt->l2_hdr->l2->ethertype, &tmp->value_16);
        if (egress_pkt->l2_hdr->l2->_PRESENT_CUR == 1) {
            egress_pkt->l2_hdr->l2->ethertype = tmp->value_16;
            egress_pkt->l2_hdr->l2->pack();
            egress_pkt->l2_hdr->l2->update_pkt(egr_pkt);
        } else {
#ifndef NO_CONSOLE_OUTPUT
            bmi_log->error("ERROR: %s() Header egress_pkt->l2_hdr->l2 not present", __FUNCTION__);
#endif
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::update_package(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    update_all_header();
    load_exp();
    load_bias();
    load_bias_exp();
    load_value();

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::reset_info(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    reset_exp();
    reset_bias();
    reset_bias_exp();
    reset_value();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: packet_info->sequence: 0x%s;  line: %d", packet_info->sequence.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((packet_info->sequence > 2)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        load_reset_bits();
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: packet_info->max_worker_bits: 0x%s;  line: %d", packet_info->max_worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
            bmi_log->normal("BM_TRACE: packet_info->reset_worker_bits: 0x%s;  line: %d", packet_info->reset_worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((packet_info->reset_worker_bits == packet_info->max_worker_bits)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            reset_bits();
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}


void _BModel::do_calculation(void) {

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif
    get_max_worker_bits();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: packet_info->sequence: 0x%s;  line: %d", packet_info->sequence.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((60000 <= packet_info->sequence)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        reset_according_sequence();
    } else {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        load_bits();
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: packet_info->max_worker_bits: 0x%s;  line: %d", packet_info->max_worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
            bmi_log->normal("BM_TRACE: packet_info->worker_bits: 0x%s;  line: %d", packet_info->worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
        }
#endif
        if ((packet_info->worker_bits == packet_info->max_worker_bits)) {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
            update_package();
        } else {
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
            }
#endif
#ifndef NO_CONSOLE_OUTPUT
            if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                bmi_log->normal("BM_TRACE: packet_info->worker_bits: 0x%s;  line: %d", packet_info->worker_bits.to_string(SC_HEX_US, false).c_str(), __LINE__);
            }
#endif
            if ((0 == packet_info->worker_bits)) {
#ifndef NO_CONSOLE_OUTPUT
                if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
                    bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
                }
#endif
                reset_info();
            }
        }
    }

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}



/*
 * ingress main
 */

void _BModel::ing_main(void) {
    _1bit sfc_idx_bits_1;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif

#ifndef NO_CONSOLE_OUTPUT
    bmi_log->normal("bm_debug_lvl = %d", bm_debug_lvl);

    bmi_log->normal("###### Starting Ingress Pipeline Processing ######");
#endif

    /* initialize packets and buses */
    _AUTO_ing_init();

    sfc_idx_bits_1 = 0;
    sfc_iarb_profile_entry = sfc_iarb_profile->lookup(0, &sfc_idx_bits_1);
    sfc_iarb_profile__sfc_call((void*)sfc_iarb_profile_entry, sfc_idx_bits_1);
    _AUTO_PARSER_NODE_start();
#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
        bmi_log->normal("BM_TRACE: ingress_pkt->l3_hdr->ipv4->_PRESENT: 0x%s;  line: %d", ingress_pkt->l3_hdr->ipv4->_PRESENT.to_string(SC_HEX_US, false).c_str(), __LINE__);
    }
#endif
    if ((ingress_pkt->l3_hdr->ipv4->_PRESENT != 0)) {
#ifndef NO_CONSOLE_OUTPUT
        if (bm_debug_lvl >= BM_DEBUG_LVL_TRACE) {
            bmi_log->normal("BM_TRACE: %s()  line: %d", __FUNCTION__, __LINE__);
        }
#endif
        printf("ipv4 present\n");
    }
    do_calculation();
    base_assign_destination();
    sfc_idx_bits_1 = 0;
    sfc_mmu_profile_entry = sfc_mmu_profile->lookup(0, &sfc_idx_bits_1);
    sfc_mmu_profile__sfc_call((void*)sfc_mmu_profile_entry, sfc_idx_bits_1);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}



/*
 * egress main
 */

void _BModel::egr_main(void) {
    _1bit sfc_idx_bits_1;

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() enter", __FUNCTION__);
    }
#endif

#ifndef NO_CONSOLE_OUTPUT
    bmi_log->normal("##### Starting Egress Pipeline Processing #####");
#endif

    /* initialize egr buses */
    _AUTO_egr_init();

    sfc_idx_bits_1 = 0;
    sfc_mmu_profile_entry = sfc_mmu_profile->lookup(0, &sfc_idx_bits_1);
    sfc_mmu_profile__sfc_call((void*)sfc_mmu_profile_entry, sfc_idx_bits_1);
    base_egress();
    do_egress_pkt_modify();
    sfc_idx_bits_1 = 0;
    sfc_edb_profile_entry = sfc_edb_profile->lookup(0, &sfc_idx_bits_1);
    sfc_edb_profile__sfc_call((void*)sfc_edb_profile_entry, sfc_idx_bits_1);

#ifndef NO_CONSOLE_OUTPUT
    if (bm_debug_lvl >= BM_DEBUG_LVL_DEBUG_NZ) {
        bmi_log->normal("BM_DEBUG: %s() exit", __FUNCTION__);
    }
#endif
}

