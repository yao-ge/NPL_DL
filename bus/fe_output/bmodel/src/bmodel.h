/*
 * $Copyright: (c) 2018 Broadcom Corp.
 * All Rights Reserved.$
 * File:     bmodel.h
 * Purpose:  NPL Behavior Modeling header file
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated from:
 * npl/bus.npl
 * Edits to this file will be lost when it is regenerated.
 *
 */

#ifndef _BMODEL_H_
#define _BMODEL_H_


/*
 * includes
 */

#include <stdlib.h>
#include <time.h>
#include "include_libs.h"
#include "table_entry_classes.h"
#include "table_classes.h"
#include "header_classes.h"
#include "reg_classes.h"
#include "format_classes.h"


/*
 * defines
 */

#define MAX_ENCAP 112
#define NUM_BYTES_CRC 4
#define HEADER_PAYLOAD_CHKSUM 1
#define BIT_BASE_BOUNDRY 64
#define HARD_DROP_MIN 128
#define TRACE_CODE_MAX 47
#define COUNT_ID_MAX 63


/*
 * enums
 */

enum pn_func_enum {
    PARSER_NODE_start_enum = 1,
    PARSER_NODE_ethernet_enum,
    PARSER_NODE_ipv4_enum,
    PARSER_NODE_udp_enum,
    PARSER_NODE_payload_enum,
    PARSER_NODE_payload1_enum,
    PARSER_NODE_ingress_enum
};


/*
 * packet drop info struct
 */

typedef struct pkt_drop_info_s {
    _8bits  first_opcode;
    _8bits  max_opcode;
    _4bits  max_strn;
    _1bit   pp_drop;
    _1bit   hard_pp_drop;
} pkt_drop_info_t;


/*
 * packet trace info struct
 */

typedef struct pkt_trace_info_s {
    _48bits  bitmap;
} pkt_trace_info_t;


/*
 * packet count info struct
 */

typedef struct pkt_count_info_s {
    _64bits  bitmap;
} pkt_count_info_t;


/*
 * sf bookkeeping struct
 */

typedef struct arg_addr_info_s {
    int     hit;
    void    *addr;
    int     size;
    int     high;
    int     low;
} arg_addr_info_t;


/*
 * sf bookkeeping class
 */

class sfc_bk_t {
private:
    arg_addr_info_t *table;

public:
    int table_rows;
    int table_cols;

    sfc_bk_t(int size, int num_args);
    ~sfc_bk_t();
    void arg_set(int, int, void*, int, int, int);
    int idx_hit(int);
    int idx_arg_hit(int, int);
    arg_addr_info_t *idx_arg_get(int, int);
};



/*
 * bmodel class
 */

class _BModel {

    public:

    _BModel();
    ~_BModel();


    /* variables */
    _8bits *ing_pkt = NULL;
    _8bits *egr_pkt = NULL;
    _32bits hdr_ptr;
    _32bits pkt_len;
    pkt_drop_info_t ing_pkt_drp_info;
    pkt_drop_info_t egr_pkt_drp_info;
    pkt_trace_info_t ing_pkt_trc_info;
    pkt_trace_info_t egr_pkt_trc_info;
    pkt_count_info_t ing_pkt_cnt_info;
    pkt_count_info_t egr_pkt_cnt_info;
    int in_ing_main;
    int test_status;
    int pn_func;
    _5bits *match_id;
    _32bits match_id_width = 5;

    /* buses */
    obj_bus_t *obj_bus = NULL;
    ccbi_t *ccbi = NULL;
    ccbe_t *ccbe = NULL;
    control_id_t *control_id = NULL;
    time_bus_t *time_bus = NULL;
    egr_obj_bus_t *egr_obj_bus = NULL;
    aux_bus_t *egr_aux_bus = NULL;
    packet_info_t *packet_info = NULL;
    tmp_t *tmp = NULL;
    index_t *index = NULL;

    /* packets */
    ingress_pkt_t *ingress_pkt = NULL;
    egress_pkt_t *egress_pkt = NULL;

    /* registers */
    tuple_t *register_tuple_t = NULL;
    ps_value *register_ps_value = NULL;
    ps_exp *register_ps_exp = NULL;
    ps_bias *register_ps_bias = NULL;
    ps_bias_exp *register_ps_bias_exp = NULL;
    ps_worker_init_bits *register_ps_worker_init_bits = NULL;
    ps_worker_bits *register_ps_worker_bits = NULL;
    ps_worker_count *register_ps_worker_count = NULL;
    ps_worker_smac *register_ps_worker_smac = NULL;
    ps_worker_sip *register_ps_worker_sip = NULL;
    ps_worker_sport *register_ps_worker_sport = NULL;

    /* table classes*/
    sfc_mmu_profile_tab_t *sfc_mmu_profile = NULL;
    sfc_edb_profile_tab_t *sfc_edb_profile = NULL;
    sfc_iarb_profile_tab_t *sfc_iarb_profile = NULL;

    /* table instances */
    sfc_mmu_profile_entry_t *sfc_mmu_profile_entry = NULL;
    sfc_edb_profile_entry_t *sfc_edb_profile_entry = NULL;
    sfc_iarb_profile_entry_t *sfc_iarb_profile_entry = NULL;

    /* bookkeeping table instances */
    sfc_bk_t *sfc_mmu_profile__bk = NULL;
    sfc_bk_t *sfc_edb_profile__bk = NULL;
    sfc_bk_t *sfc_iarb_profile__bk = NULL;

    /* prototypes */
    #include "mid_functions.h"
    void _AUTO_ing_init(void);
    void _AUTO_egr_init(void);
    void _AUTO_sf_tbl_init(void);
    void _AUTO_PARSER_NODE_start(void);
    void _AUTO_PARSER_NODE_ethernet(void);
    void _AUTO_PARSER_NODE_ipv4(void);
    void _AUTO_PARSER_NODE_udp(void);
    void _AUTO_PARSER_NODE_payload(void);
    void _AUTO_PARSER_NODE_payload1(void);
    void _AUTO_PARSER_NODE_ingress(void);
    void base_assign_destination(void);
    void base_egress(void);
    void do_drop_action(void);
    void set_bcast(void);
    void reset_all(void);
    void update_all_header(void);
    void save_worker(void);
    void worker_count_reset(void);
    void load_worker(void);
    void worker_count_sub(void);
    void worker_count_add(void);
    void worker_count_set(void);
    void load_init_bits(void);
    void reset_init_bits(void);
    void set_init_bits(void);
    void set_bits(void);
    void reset_bits(void);
    void load_bits(void);
    void load_reset_bits(void);
    void load_exp(void);
    void read_exp(void);
    void save_first_exp(void);
    void save_exp(void);
    void reset_exp(void);
    void load_bias_exp(void);
    void read_bias_exp(void);
    void save_first_bias_exp(void);
    void save_bias_exp(void);
    void reset_bias_exp(void);
    void load_bias(void);
    void save_first_bias(void);
    void save_bias(void);
    void reset_bias(void);
    void load_value(void);
    void save_first_value(void);
    void reset_value(void);
    void save_value(void);
    void get_max_worker_bits(void);
    void reset_according_sequence(void);
    void do_egress_pkt_modify(void);
    void update_package(void);
    void reset_info(void);
    void do_calculation(void);
    void ing_main(void);
    void egr_main(void);

    /* sf wrap prototypes */
    void sfc_mmu_profile__sfc_call(void*, int);
    void sfc_edb_profile__sfc_call(void*, int);
    void sfc_iarb_profile__sfc_call(void*, int);

    /*                                   */
    /* User Supplied Function Prototypes */
    /*                                   */

    /* checksum prototypes */

    /* update packet length prototypes */

    /* editor prototypes */
    virtual void add_header(_8bits*, void*, void*);
    virtual void add_header_pkt(_8bits *pkt, void *ptr0, uint8 pos, void *ptr1);
    virtual void delete_header(_8bits*, void*);
    virtual void packet_length_update(void*, void*, _32bits*, _8bits*, _8bits*);

    /* packet prototypes */
    virtual void packet_drop(_8bits*, _8bits*, _4bits*);
    virtual void packet_trace(_8bits*, _8bits*);
    virtual void packet_count(_8bits*, _8bits*);

    /* sf call prototypes */
    virtual void sfc_mmu_func(_128bits*, _128bits*, _7bits*, int*);
    virtual void sfc_edb_func(_16bits*, _8bits*, _7bits*);
    virtual void sfc_iarb_func(_4bits*, _1bit*, _7bits*, _2bits*, _16bits*);

};

#endif /* _BMODEL_H_ */
