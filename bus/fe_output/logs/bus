# 1 "npl/bus.npl"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "npl/bus.npl"
# 38 "npl/bus.npl"
# 1 "npl/functions.npl" 1
# 1 "npl/registers.npl" 1
# 1 "npl/structs.npl" 1
# 1 "npl/base_helper.npl" 1
# 42 "npl/base_helper.npl"
struct l2_t {
    fields {
        bit[48] macda;
        bit[48] macsa;
        bit[16] ethertype;
    }
}

struct vlan_t {
    fields {
        bit[3] pcp;
        bit cfi;
        bit[12] vid;
        bit[16] ethertype;
    }
}

struct ipv4_t {
    fields {
        bit[4] version;
        bit[4] hdr_len;
        bit[8] tos;
        bit[16] v4_length;
        bit[16] id;
        bit[3] flags;
        bit[13] frag_offset;
        bit[8] ttl;
        bit[8] protocol;
        bit[16] hdr_checksum;
        bit[32] sip;
        bit[32] dip;
        varbit[512] option;
    }
    header_length_exp : hdr_len*4;
}

struct udp_t {
 fields {
     bit[16] sport;
     bit[16] dport;
     bit[16] length;
     bit[16] checksum;
     bit[16] job_id;
     bit[16] max_worker;
     bit[16] worker_id;
     bit[16] sequence;
     bit[16] exp;
     bit[16] bias;
     bit[16] bias_exp;
 }
}
# 108 "npl/base_helper.npl"
struct l2_hdr_grp_t {
    fields {
        l2_t l2;
    }
}

struct l3_hdr_grp_t {
    fields {
        ipv4_t ipv4;
    }
}

struct l4_hdr_grp_t {
 fields {
  udp_t udp;
 }
}


struct ingress_pkt_t {
    fields {
        l2_hdr_grp_t l2_hdr;
        l3_hdr_grp_t l3_hdr;
  l4_hdr_grp_t l4_hdr;

    }
}

struct egress_pkt_t {
    fields {
        l2_hdr_grp_t l2_hdr;
        l3_hdr_grp_t l3_hdr;
  l4_hdr_grp_t l4_hdr;

    }
}


packet ingress_pkt_t ingress_pkt;
packet egress_pkt_t egress_pkt;


struct obj_bus_t {
    fields {
        bit[2] port_type_cfg;
        bit[7] port_num;
        bit[8] dst_modid;
        bit[7] dst_port;
    }
}


struct ccbi_t {
    fields {
        bit[128] l2_pbm;
        bit[128] l3_pbm;
    }
}

struct ccbe_t {
    fields {
        bit[7] dst_port;
    }
}

struct control_id_t {
    fields {
        bit[4] otpid_enable;
        bit ts_enable;
    }
}

struct time_bus_t {
    fields {
        bit[16] currenttime;
    }
}

struct egr_obj_bus_t {
    fields {
        bit[8] dst_modid;
        bit[7] dst_port;
        bit[7] ing_port;
        bit[16] ingress_timestamp;
    }
}

struct aux_bus_t {
    fields {
        bit [16] drop_vector;
    }
}

bus obj_bus_t obj_bus;
bus ccbi_t ccbi;
bus ccbe_t ccbe;
bus control_id_t control_id;
bus time_bus_t time_bus;
bus egr_obj_bus_t egr_obj_bus;
bus aux_bus_t egr_aux_bus;



special_function iarb {

    usage_mode_create(in const eindex,
               out bit[4] otpid_enable,
               out bit[1] ts_enable,
               out bit[7] port_num,
               out bit[2] port_type_cfg,
               out bit[16] currenttime
               );

    usage_mode_select(in bit[1] eindex);

}

special_function mmu {

    usage_mode_create(in const eindex,
               in bit[128] l2_pbm,
               in bit[128] l3_pbm,
               out bit[7] dst_port
               );

    usage_mode_select(in bit[1] eindex);

}


special_function edb {

    usage_mode_create(in const eindex,
               in bit[16] drop_vector,
               in bit[8] dst_mod,
               in bit[7] dst_port
               );

    usage_mode_select(in bit[1] eindex);

}

function base_assign_destination() {
    ccbi.l3_pbm = 0;
    ccbe.dst_port = 0;
    ccbi.l2_pbm = 1 << obj_bus.port_num;
}

function base_egress() {
    egr_aux_bus.drop_vector = 0;
    egr_obj_bus.dst_modid = 0;
    egr_obj_bus.dst_port = obj_bus.port_num;
}
# 2 "npl/structs.npl" 2
# 21 "npl/structs.npl"
struct packet_value_t {
 fields {
  bit[8192] value;
 }
}

struct tmp_t {
 fields {
  bit[48] value_48;
  bit[32] value_32;
  bit[16] value_16;
 }
}

struct index_t {
 fields {
  bit[48] value_48;
  bit[32] value_32;
  bit[16] value_16;
 }
}

struct packet_info_t {
 fields {
  bit[16] job_id;
  bit[16] max_worker;
  bit[16] worker_id;
  bit[16] sequence;
  bit[16] exp;
  bit[16] bias;
  bit[16] bias_exp;
  bit[16] worker_count;
  bit[16] worker_init_bits;
  bit[16] worker_bits;
  bit[16] max_worker_bits;
  bit[16] reset_worker_bits;
  packet_value_t masks[2];
 }
}






bus packet_info_t packet_info;
bus tmp_t tmp;
bus index_t index;
# 2 "npl/registers.npl" 2





logical_register tuple_t {
 fields {
  bit[32] data_t = 0;
 }
}


logical_register ps_value {
 fields {
  bit[8192] value00 = 0;
  bit[8192] value01 = 0;
  bit[8192] value10 = 0;
  bit[8192] value11 = 0;
  bit[8192] value20 = 0;
  bit[8192] value21 = 0;
  bit[8192] value30 = 0;
  bit[8192] value31 = 0;
 }
}

logical_register ps_exp {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_bias {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_bias_exp {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_worker_init_bits {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_worker_bits {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_worker_count {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}

logical_register ps_worker_smac {
 fields {
  bit[48] value0 = 0;
  bit[48] value1 = 0;
  bit[48] value2 = 0;
  bit[48] value3 = 0;
 }
}

logical_register ps_worker_sip {
 fields {
  bit[32] value0 = 0;
  bit[32] value1 = 0;
  bit[32] value2 = 0;
  bit[32] value3 = 0;
 }
}

logical_register ps_worker_sport {
 fields {
  bit[16] value0 = 0;
  bit[16] value1 = 0;
  bit[16] value2 = 0;
  bit[16] value3 = 0;
 }
}
# 2 "npl/functions.npl" 2
# 31 "npl/functions.npl"
function do_drop_action() {
 packet_drop(1, DROP_REASON__ZERO_DA, 0);
 egr_aux_bus.drop_vector = 1;
}

function reset_worker_bits() {
 ps_worker_bits.value0 =0;
 ps_worker_bits.value1 =0;
 ps_worker_bits.value2 =0;
 ps_worker_bits.value3 =0;
}


function set_bcast() {

 ingress_pkt.l2_hdr.macsa[40:40] = 1;
}

function update_all_header() {
 tmp.value_48 = ingress_pkt.l2_hdr.l2.macda;
 ingress_pkt.l2_hdr.l2.macda = ingress_pkt.l2_hdr.l2.macsa;
 ingress_pkt.l2_hdr.l2.macsa = tmp.value_48;
 ingress_pkt.l3_hdr.ipv4.ttl = ingress_pkt.l3_hdr.ipv4.ttl + 255;

 tmp.value_32 = ingress_pkt.l3_hdr.ipv4.dip;
 ingress_pkt.l3_hdr.ipv4.dip = ingress_pkt.l3_hdr.ipv4.sip;
 ingress_pkt.l3_hdr.ipv4.sip = tmp.value_32;

 tmp.value16 = ingress_pkt.l4_hdr.udp.dport;
 ingress_pkt.l4_hdr.udp.dport = ingress_pkt.l4_hdr.udp.sport;
 ingress_pkt.l4_hdr.udp.sport = tmp.value_16;
}

function save_bias() {
 index.value_32 = WORKER_ADDR;
 if (0x00 == index.value_32){
     ps_exp.value0 = packet_info.exp;
 }else if(0x01 == index.value_32){
     ps_exp.value1 = packet_info.exp;
 }else if(0x02 == index.value_32){
     ps_exp.value2 = packet_info.exp;
 }else if(0x03 == index.value_32){
     ps_exp.value3 = packet_info.exp;
 }else{
  do_drop_action();
 }
}

function worker_count_add() {
 index.value_32 = (packet_info.job_id * 4 + packet_info.sequence % 4);
 if(0x00 == index.value_32){
  ps_worker_count.value0 = ps_worker_count.value0 + 1;
  packet_inf.worker_count = ps_worker_count.value0;
 }else if(0x01 == index.value_32){
  ps_worker_count.value1 = ps_worker_count.value1 + 1;
  packet_inf.worker_count = ps_worker_count.value1;
 }else if(0x02 == index.value_32){
  ps_worker_count.value2 = ps_worker_count.value2 + 1;
  packet_inf.worker_count = ps_worker_count.value2;
 }else if(0x03 == index.value_32){
     ps_worker_count.value3 = ps_worker_count.value3 + 1;
  packet_inf.worker_count = ps_worker_count.value3;
 }else{
  do_drop_action();
 }
}

function worker_count_set() {
 index.value_32 = (packet_info.job_id * 4 + packet_info.sequence % 4);
 if(0x00 == index.value_32){
  ps_worker_count.value0 = packet_info.max_wroker;
  packet_info.worker_count = ps_worker_count.value0;
 }else if(0x01 == index.value_32){
  ps_worker_count.value1 = packet_info.max_wroker;
  packet_info.worker_count = ps_worker_count.value1;
 }else if(0x02 == index.value_32){
  ps_worker_count.value2 = packet_info.max_wroker;
  packet_info.worker_count = ps_worker_count.value2;
 }else if(0x03 == index.value_32){
  ps_worker_count.value3 = packet_info.max_wroker;
  packet_info.worker_count = ps_worker_count.value3;
 }else{
  do_drop_action();
 }
}

function worker_count_reset() {
 index.value_32 = (packet_info.job_id * 4 + packet_info.sequence % 4);
 if(0x00 == index.value_32){
  ps_worker_count.value0 = 0;
 }else if(0x01 == index.value_32){
  ps_worker_count.value1 = 0;
 }else if(0x02 == index.value_32){
  ps_worker_count.value2 = 0;
 }else if(0x03 == index.value_32){
  ps_worker_count.value3 = 0;
 }else{
  do_drop_action();
 }
}

function load_bits() {
 index.value_32 = (packet_info.job_id * 4 + packet_info.sequence % 4);
 if(0x00 == index.value_32){
  packet_info.worker_bits = ps_worker_bits.value0;
 }else if(0x01 == index.value_32){
  packet_info.worker_bits = ps_worker_bits.value1;
 }else if(0x02 == index.value_32){
  packet_info.worker_bits = ps_worker_bits.value2;
 }else if(0x03 == index.value_32){
  packet_info.worker_bits = ps_worker_bits.value3;
 }else{
  do_drop_action();
 }
}

function load_reset_bits() {
 index.value_32 = WORKER_BITS_RESET_ADDR;
 if(0x00 == index.value_32){
  packet_info.reset_worker_bits = ps_worker_bits.value0;
 }else if(0x01 == index.value_32){
  packet_info.reset_worker_bits = ps_worker_bits.value1;
 }else if(0x02 == index.value_32){
  packet_info.reset_worker_bits = ps_worker_bits.value2;
 }else if(0x03 == index.value_32){
  packet_info.reset_worker_bits = ps_worker_bits.value3;
 }else{
  do_drop_action();
 }
}

function load_init_bits() {
 index.value_32 = (packet_info.job_id * 4 + packet_info.sequence % 4);
 if(0x00 == index.value_32){ packet_info.worker_init_bits = ps_worker_init_bits.value0; }else if(0x01 == index.value_32){ packet_info.worker_init_bits = ps_worker_init_bits.value1; }else if(0x02 == index.value_32){ packet_info.worker_init_bits = ps_worker_init_bits.value2; }else if(0x03 == index.value_32){ packet_info.worker_init_bits = ps_worker_init_bits.value3; }else{ do_drop_action(); }
}

function add_string(){
 ps_worker_bits.value0 = 12;
 print("add string:%d\n", ps_worker_bits.value0);
}
# 39 "npl/bus.npl" 2






parser_node start {
    root_node : 1;
    next_node ethernet;
}

parser_node ethernet {
  extract_fields(ingress_pkt.l2_hdr.l2);
  switch(latest.ethertype) {
    0x0800:
      next_node ipv4;

    default :
      next_node ingress;
  }
}

parser_node ipv4 {
    extract_fields(ingress_pkt.l3_hdr.ipv4);
    next_node udp;
}

parser_node udp {
 extract_fields(ingress_pkt.l4_hdr.udp);
 packet_info.job_id = ingress_pkt.l4_hdr.udp.job_id;
 packet_info.worker_id = ingress_pkt.l4_hdr.udp.worker_id;
 packet_info.sequence = ingress_pkt.l4_hdr.udp.sequence;
 packet_info.exp = ingress_pkt.l4_hdr.udp.exp;
 packet_info.bias = ingress_pkt.l4_hdr.udp.bias;
 packet_info.bias_exp = ingress_pkt.l4_hdr.udp.bias_exp;
 next_node ingress;
}
# 92 "npl/bus.npl"
parser_node ingress {
    end_node: 1;
}





program bus_example {



    iarb.usage_mode_create( 0, control_id.otpid_enable, control_id.ts_enable, obj_bus.port_num, obj_bus.port_type_cfg, time_bus.currenttime ); iarb.execute();


    parse_begin(start);


    base_assign_destination();
    mmu.usage_mode_create( 0, ccbi.l2_pbm, ccbi.l3_pbm, ccbe.dst_port ); mmu.execute();


    base_egress();



    edb.usage_mode_create( 0, egr_aux_bus.drop_vector, egr_obj_bus.dst_modid, egr_obj_bus.dst_port ); edb.execute();

}
